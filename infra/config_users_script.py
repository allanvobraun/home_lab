import os
from pyinfra import host
from pyinfra.operations import server, files, apt, systemd, ssh

# Configuration
USERS = ["allan", "pyinfra"]
SSH_PORT = 22  # Change this to a non-standard port for additional security (e.g., 2222)
LOCAL_KEYS_DIR = "/home/allanbraun/.ssh"  # Local directory to store generated keys


os.makedirs(LOCAL_KEYS_DIR, exist_ok=True)

print(f"[*] Starting Ubuntu Server Hardening")
print(f"[*] SSH keys will be saved to: {LOCAL_KEYS_DIR}")

# =============================================================================
# 1. USER MANAGEMENT
# =============================================================================

for username in USERS:
    # Create user with home directory and bash shell
    server.user(
        name=f"Create user {username}",
        user=username,
        home=f"/home/{username}",
        shell="/bin/bash",
        ensure_home=True,
        system=False,
        _sudo=True
    )

    # Add user to sudo group
    server.shell(
        name=f"Add {username} to sudo group",
        _sudo=True,
        commands=[
            f"sudo adduser {username} sudo"
        ]
    )

    server.shell(
        name="Set up user password",
        _sudo=True,
        commands=[
            f"passwd -de {username}"
        ]
    )

    server.shell(
        name="Set up bashrc",
        commands=[
            f"cp -u /etc/skel/.bashrc /home/{username}/.bashrc"
        ]
    )

    # Create .ssh directory
    files.directory(
        name=f"Create .ssh directory for {username}",
        path=f"/home/{username}/.ssh",
        user=username,
        group=username,
        mode="700",
        _sudo=True
    )

    # Generate SSH key pair on the server
    private_key = host.get_fact(
        files.File,
        path=f"/home/{username}/.ssh/id_ed25519",
        _sudo=True,
    )
    if private_key is None:
        server.shell(
            name=f"Generate SSH key pair for {username}",
            _sudo=True,
            commands=[
                f"ssh-keygen -t ed25519 -f /home/{username}/.ssh/id_ed25519 -N '' -C 'generated by pyinfra'"
            ],
        )

    # Set up authorized_keys with the public key
    server.shell(
        name=f"Set up authorized_keys for {username}",
        _sudo=True,
        commands=[
            f"cat /home/{username}/.ssh/id_ed25519.pub >> /home/{username}/.ssh/authorized_keys",
            f"chown {username}:{username} /home/{username}/.ssh/authorized_keys",
            f"chmod 600 /home/{username}/.ssh/authorized_keys",
        ],
    )

    # Download the private key to local machine
    files.get(
        name=f"Download SSH private key for {username}",
        src=f"/home/{username}/.ssh/id_ed25519",
         dest=f"{LOCAL_KEYS_DIR}/{username}_raspberry",
        _sudo=True,
    )

    # Download the public key to local machine
    files.get(
        name=f"Download SSH public key for {username}",
        src=f"/home/{username}/.ssh/id_ed25519.pub",
        dest=f"{LOCAL_KEYS_DIR}/{username}_raspberry.pub",
        _sudo=True,
    )

# =============================================================================
# 2. SSH HARDENING
# =============================================================================

# Backup original SSH config
files.file(
    name="Backup original SSH config",
    path="/etc/ssh/sshd_config.backup",
    _sudo=True,
    present=True,
    create_remote_dir=False,
)

server.shell(
    name="Copy SSH config backup",
    _sudo=True,
    commands=["cp -n /etc/ssh/sshd_config /etc/ssh/sshd_config.backup || true"],
)

# Configure SSH daemon with security hardening
ssh_config_lines = [
    "# SSH Hardening Configuration",
    f"Port {SSH_PORT}",
    "Protocol 2",
    "",
    "# Authentication",
    "PermitRootLogin no",
    "PasswordAuthentication no",
    "PermitEmptyPasswords no",
    "ChallengeResponseAuthentication no",
    "PubkeyAuthentication yes",
    "AuthenticationMethods publickey",
    "",
    "# Security options",
    "X11Forwarding no",
    "MaxAuthTries 3",
    "MaxSessions 2",
    "LoginGraceTime 30",
    "",
    "# Cryptography",
    "HostKeyAlgorithms ssh-ed25519,rsa-sha2-512,rsa-sha2-256",
    "KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org",
    "Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com",
    "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com",
    "",
    "# Logging",
    "SyslogFacility AUTH",
    "LogLevel VERBOSE",
    "",
    "# Other",
    "UsePAM yes",
    "PrintLastLog yes",
    "TCPKeepAlive yes",
    "Compression no",
    "ClientAliveInterval 300",
    "ClientAliveCountMax 2",
    "",
    "# Allow only specific users",
    f"AllowUsers {' '.join(USERS)}",
]

files.line(
    name="Configure SSH hardening settings",
    path="/etc/ssh/sshd_config",
    line="\n".join(ssh_config_lines),
    present=True,
    backup=True,
    _sudo=True
)

# =============================================================================
# 3. FIREWALL CONFIGURATION (UFW)
# =============================================================================

apt.packages(
    name="Install UFW firewall",
    packages=["ufw"],
    update=True,
    _sudo=True
)

server.shell(
    name="Configure UFW firewall rules",
    commands=[
        "ufw --force reset",
        "ufw default deny incoming",
        "ufw default allow outgoing",
        f"ufw allow {SSH_PORT}/tcp comment 'SSH'",
        "ufw --force enable",
    ],
    _sudo=True
)


# =============================================================================
# 5. AUTOMATIC SECURITY UPDATES
# =============================================================================

apt.packages(
    name="Install unattended-upgrades",
    packages=["unattended-upgrades", "apt-listchanges"],
    update=False,
    _sudo=True
)

files.line(
    name="Enable automatic security updates",
    path="/etc/apt/apt.conf.d/20auto-upgrades",
    line='APT::Periodic::Update-Package-Lists "1";\nAPT::Periodic::Unattended-Upgrade "1";\nAPT::Periodic::AutocleanInterval "7";',
    present=True,
    _sudo=True
)

# =============================================================================
# 7. ADDITIONAL SECURITY PACKAGES
# =============================================================================

# apt.packages(
#     name="Install additional security tools",
#     packages=[
#         "auditd",      # Audit daemon for security auditing
#         "aide",        # Advanced Intrusion Detection Environment
#         "rkhunter",    # Rootkit hunter
#         "logwatch",    # Log analyzer
#         "apparmor",    # Mandatory Access Control
#         "apparmor-utils",
#     ],
#     update=False,
# )
#
# systemd.service(
#     name="Enable auditd service",
#     service="auditd",
#     enabled=True,
#     running=True,
# )

# =============================================================================
# 8. RESTART SSH SERVICE
# =============================================================================

# Note: This will be done last after all SSH configurations are in place
systemd.service(
    name="Restart SSH service to apply changes",
    service="ssh",
    restarted=True,
    _sudo=True
)
